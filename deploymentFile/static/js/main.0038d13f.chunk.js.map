{"version":3,"sources":["redux/content/contentTypes.js","components/chart.js","components/slider.js","components/tabContent.js","redux/content/contentAction.js","components/tabs.js","redux/content/contentReducer.js","redux/store.js","App.js","reportWebVitals.js","index.js"],"names":["UPDATE_SLIDER","ADD_NEW_TAB_CONTENT","Chart","props","ref","useRef","data","sliderRange","width","height","useEffect","select","current","attr","style","draw","svg","xScale","scaleBand","domain","map","d","range","padding","yScale","scaleLinear","max","xAxis","axisBottom","ticks","length","call","yAxis","axisLeft","selectAll","join","bandwidth","transition","duration","i","className","useStyles","makeStyles","root","valuetext","value","RangeSlider","classes","React","useState","setValue","Typography","id","gutterBottom","Slider","min","onChange","event","newValue","valueLabelDisplay","aria-labelledby","getAriaValueText","connect","state","contents","dispatch","updateSlider","index","type","payload","values","addNewTabContent","tabsNumber","display","TabPanel","children","other","component","role","hidden","Box","p","theme","flexGrow","backgroundColor","palette","background","paper","initialTabs","displayedContent","ScrollableTabsButtonAuto","selectedTab","setSelectedTab","tabs","setTab","target","setTarget","AppBar","position","color","Tabs","tagName","indicatorColor","textColor","variant","scrollButtons","aria-label","tab","Tab","label","IconButton","onClick","document","getElementsByClassName","item","fontSize","a11yProps","initialState","contentReducer","action","item2","push","contentCounter","store","createStore","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"iRAAaA,EAAgB,gBAChBC,EAAsB,sB,QC6EpBC,MA3Ef,SAAgBC,GAEZ,IAAMC,EAAMC,mBACRC,EAAO,CAAC,GAAI,GAAI,IAAK,GAAI,GAAI,GAAI,IAAI,IACrCC,EAAcJ,EAAMI,YAIpBC,EAAQ,IADkB,GAAsB,GAEhDC,EAAS,IAFM,GAAuB,GAM1CC,qBAAU,WACMC,YAAOP,EAAIQ,SAClBC,KAAK,QAASL,EAAQ,IACtBK,KAAK,SAAUJ,EAAS,IACxBK,MAAM,SAAU,qBACtB,IAEHJ,qBAAU,WACNK,MACD,CAACT,IAEJ,IAAMS,EAAO,WAET,IAAMC,EAAML,YAAOP,EAAIQ,SAEnBK,EAASC,cACJC,OAAOb,EAAKc,KAAI,SAASC,GAAK,OAAQA,MACtCC,MAAM,CAAC,EAAGd,IAAQe,QAAQ,IAC/BC,EAASC,cACJN,OAAO,CAAC,EAAGO,YAAIpB,GAAM,SAASe,GAAK,OAAQA,KAAQ,KACnDC,MAAM,CAACb,EAAQ,IAElBkB,EAAQC,YAAWX,GACpBY,MAAMvB,EAAKwB,QAEhBd,EACKL,OAAO,WACPG,MAAM,YAAa,mBAAmBL,EAAO,MAC7CsB,KAAKJ,GAEV,IAAMK,EAAQC,YAAST,GAAQK,MAAM,GACrCb,EACKL,OAAO,WACPG,MAAM,YAAa,oBACnBiB,KAAKC,GAIEhB,EAAIkB,UAAU,SAErB5B,KAAKA,GACL6B,KAAK,QACLtB,KAAK,QAAS,QACdA,KAAK,KAAK,SAASQ,GAAK,OAAOJ,EAAOI,MACtCR,KAAK,KAAK,SAASQ,GAAK,OAAOG,EAAOH,MACtCP,MAAM,YAAa,oBACnBD,KAAK,QAASI,EAAOmB,aACrBvB,KAAK,UAAU,SAASQ,GAAK,OAAOZ,EAASe,EAAOH,MACpDgB,aAAaC,SAAS,KACtBzB,KAAK,QAAQ,SAAUQ,EAAGkB,GAAI,OAAGA,EAAE,GAAKhC,EAAY,IAAMgC,EAAE,GAAKhC,EAAY,GAAW,UAAuB,WAGxH,OACI,8BACI,sBAAKH,IAAKA,EAAV,UACI,mBAAGoC,UAAU,WACb,mBAAGA,UAAU,iB,2BCnEvBC,EAAYC,YAAW,CACzBC,KAAM,CACFnC,MAAO,OAIf,SAASoC,EAAUC,GACf,MAAM,GAAN,OAAUA,GAgCCC,MA7Bf,SAAqB3C,GACjB,IAAM4C,EAAUN,IADQ,EAGEO,IAAMC,SAAS,CAD7B,EAAS,IAFG,mBAGjBJ,EAHiB,KAGVK,EAHU,KAWxB,OACI,sBAAKV,UAAWO,EAAQJ,KAAxB,UACI,cAACQ,EAAA,EAAD,CAAYC,GAAG,eAAeC,cAAY,EAA1C,kCAGA,cAACC,EAAA,EAAD,CACIT,MAAOA,EACPnB,IAhBS,EAiBT6B,IAjBA,EAkBAC,SAdS,SAACC,EAAOC,GACzBR,EAASQ,GACTvD,EAAMqD,SAASE,IAaPC,kBAAkB,OAClBC,kBAAgB,eAChBC,iBAAkBjB,QCElC,IAaekB,eAbS,SAAAC,GACpB,MAAO,CACHC,SAAUD,MAIS,SAAAE,GACvB,MAAO,CACHC,aAAc,SAACC,EAAOtB,GAAR,OAAkBoB,EC9CZ,WACxB,MAAO,CACHG,KAAMpE,EACNqE,QAAS,CAACF,MAHgC,uDAAb,EAGLG,OAHkB,yCD8CDJ,CAAaC,EAAOtB,KAC7D0B,iBAAkB,kBAAMN,ECvCrB,CACHG,KAAOnE,QD0CA6D,EA9Cf,SAAqB3D,GAOjB,OALAO,qBAAU,WACNP,EAAMoE,qBACP,CAACpE,EAAMqE,aAIN,8BAKsB,GAAjBrE,EAAMsE,SACP,gCACI,kCACA,6BACI,cAAC,EAAD,CAAOlE,YAAaJ,EAAM6D,SAASA,SAAS7D,EAAMiD,IAAI7C,gBAE1D,6BACI,6BACI,cAAC,EAAD,CAAaiD,SAAU,SAAAX,GAAU1C,EAAM+D,aAAa/D,EAAMiD,GAAIP,oB,+EEftF,SAAS6B,EAASvE,GAAQ,IACdwE,EAAqCxE,EAArCwE,SAAU9B,EAA2B1C,EAA3B0C,MAAOsB,EAAoBhE,EAApBgE,MAAUS,EADd,YACwBzE,EADxB,8BAGrB,OACI,cAACgD,EAAA,EAAD,yBACI0B,UAAU,MACVC,KAAK,WACLC,OAAQlC,IAAUsB,EAClBf,GAAE,mCAA8Be,GAChCP,kBAAA,8BAAwCO,IACpCS,GANR,aAQK,cAACI,EAAA,EAAD,CAAKC,EAAG,EAAR,SAAYN,OAkBzB,IAAMlC,EAAYC,aAAW,SAACwC,GAAD,MAAY,CACrCvC,KAAM,CACFwC,SAAU,EACV3E,MAAO,OACP4E,gBAAiBF,EAAMG,QAAQC,WAAWC,WAI5CC,EAAc,CACZ,CAACpC,GAAI,EAAGqC,kBAAkB,IA2GnBC,MAxGf,WACI,IAAM3C,EAAUN,IADgB,EAEMQ,mBAAS,GAFf,mBAEzB0C,EAFyB,KAEZC,EAFY,OAGT3C,mBAASuC,GAHA,mBAGzBK,EAHyB,KAGnBC,EAHmB,OAMJ7C,mBAAS,MANL,mBAMzB8C,EANyB,KAMjBC,EANiB,KAwBhC,OACI,sBAAKxD,UAAWO,EAAQJ,KAAxB,UACI,cAACsD,EAAA,EAAD,CAAQC,SAAS,SAASC,MAAM,UAAhC,SACI,eAACC,EAAA,EAAD,CACIvD,MAAO8C,EACPnC,SArBK,SAACC,EAAOC,GAEE,QAAxBD,EAAMsC,OAAOM,SACZT,EAAelC,GACfsC,EAAUvC,EAAMsC,SAGc,SAAzBtC,EAAMsC,OAAOM,SAAsB5C,EAAMsC,QAAUA,GACxDH,EAAeC,EAAK,GAAGzC,IACvB4C,EAAUvC,EAAMsC,SAGhBH,EAAelC,IAUP4C,eAAe,UACfC,UAAU,UACVC,QAAQ,aACRC,cAAc,OACdC,aAAW,+BAPf,UAUKb,EAAKzE,KAAI,SAACuF,EAAKxC,GAEZ,OACQ,cAACyC,EAAA,EAAD,aAAkBpE,UAAW,SAAUK,MAAO8D,EAAIvD,GAAIyD,MAAO,8CAAaF,EAAIvD,IAC1E,cAAC0D,EAAA,EAAD,CAAYC,QAAS,WAEjB,GAAmB,IAAhBlB,EAAK/D,OAAa,CAEjBkF,SAASC,uBAAT,UAA0CN,EAAIvD,IAAItC,MAAM2D,QAAU,OAClE,IAAIyC,EAAOrB,EAAK1B,GAChB+C,EAAKzB,iBAAmB,UACxBI,EAAK1B,GAAS+C,EACdpB,EAAOD,KARf,SAYE,cAAC,IAAD,CAAOsB,SAAS,gBAxEtD,SAAmBhD,GACf,MAAO,CACHf,GAAG,uBAAD,OAAyBe,GAC3B,gBAAgB,4BAAhB,OAA6CA,IAwEZiD,CAAUjD,IAhBTwC,EAAIvD,OAqB1B,cAAC0D,EAAA,EAAD,CACIC,QAAS,WAELjB,EAAO,GAAD,mBAAKD,GAAL,CAAW,CAACzC,GAAIyC,EAAK/D,OAAQ2D,kBAAkB,OAH7D,SAMI,cAAC,IAAD,WAKXI,EAAKzE,KAAI,SAACuF,EAAKxC,GAEZ,OACI,eAACO,EAAD,CAAU7B,MAAO8C,EAAaxB,MAAOA,EAArC,UACI,qBAAK3B,UAAS,eAAU2B,GAAxB,SACG,cAAC,EAAD,CAAYf,GAAIe,EAAOK,WAAYqB,EAAK/D,OAAQ2C,QAASkC,EAAIlB,sBAI3DkB,EAAIlB,kBACL,uEACyC,cAACqB,EAAA,EAAD,CACrCC,QAAS,WACL,IAAIG,EAAOrB,EAAK1B,GAChB+C,EAAKzB,kBAAmB,EACxBI,EAAK1B,GAAS+C,EACdpB,EAAOD,GACPG,EAAU7B,IANuB,SASrC,cAAC,IAAD,MAVJ,kC,QCvItBkD,EAAe,CACjBrD,SAAU,CACN,CAAEZ,GAAI,EAAG7C,YAAa,CAAC,EAAG,MAyBnB+G,EArBQ,WAAmC,IAAlCvD,EAAiC,uDAAzBsD,EAAcE,EAAW,uCACrD,OAAQA,EAAOnD,MAEX,KAAKpE,EACD,IAAIwH,EAAQzD,EAAMC,SAASuD,EAAOlD,QAAQF,OAG1C,OAFAqD,EAAMjH,YAAcgH,EAAOlD,QAAQC,OACnCP,EAAMC,SAASuD,EAAOlD,QAAQF,OAASqD,EAChC,CACHxD,SAAUD,EAAMC,UAGxB,KAAK/D,EAED,OADA8D,EAAMC,SAASyD,KAAK,CAAErE,GAAIW,EAAMjC,OAAS,EAAG4F,eAAgB,EAAGnH,YAAa,CAAC,EAAG,KACzE,CACHyD,SAAUD,EAAMC,UAGxB,QAAS,OAAOD,ICpBT4D,EAFDC,YAAYN,GCYXO,MAVf,WACE,OACE,cAAC,IAAD,CAAUF,MAAOA,EAAjB,SACI,qBAAKnF,UAAU,MAAf,SACE,cAAC,EAAD,SCGKsF,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFzB,SAAS0B,eAAe,SAM1BZ,M","file":"static/js/main.0038d13f.chunk.js","sourcesContent":["export const UPDATE_SLIDER = 'UPDATE_SLIDER'\r\nexport const ADD_NEW_TAB_CONTENT = 'ADD_NEW_TAB_CONTENT'\r\n\r\n","import React, {useEffect, useRef} from 'react'\r\nimport { select, axisBottom, axisLeft, scaleLinear, max, scaleBand } from \"d3\";\r\n\r\nfunction Chart (props) {\r\n\r\n    const ref = useRef();\r\n    let data = [84, 14, 234, 37, 64, 42, 197,11]\r\n    let sliderRange = props.sliderRange;\r\n\r\n    // set the dimensions and margins of the graph\r\n    let margin = {top: 10, right: 30, bottom: 30, left: 40},\r\n        width = 600 - margin.right - margin.left,\r\n        height = 400 - margin.top - margin.bottom;\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        const svg = select(ref.current)\r\n            .attr(\"width\", width + 30)\r\n            .attr(\"height\", height + 20)\r\n            .style(\"border\", \"1px solid black\")\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        draw();\r\n    }, [data]);\r\n\r\n    const draw = () => {\r\n\r\n        const svg = select(ref.current);\r\n\r\n        let xScale = scaleBand()\r\n                .domain(data.map(function(d) { return +d; }))\r\n                .range([0, width]).padding(0.4),\r\n            yScale = scaleLinear()\r\n                .domain([0, max(data, function(d) { return +d; }) + 80])\r\n                .range([height, 0]);\r\n\r\n        const xAxis = axisBottom(xScale)\r\n            .ticks(data.length)\r\n\r\n        svg\r\n            .select(\".x-axis\")\r\n            .style(\"transform\", \"translate(30px, \"+height+\"px\")\r\n            .call(xAxis);\r\n\r\n        const yAxis = axisLeft(yScale).ticks(4);\r\n        svg\r\n            .select(\".y-axis\")\r\n            .style(\"transform\", \"translateX(30px)\")\r\n            .call(yAxis);\r\n\r\n\r\n\r\n        let rects = svg.selectAll(\".rect\");\r\n        rects\r\n            .data(data)\r\n            .join('rect')\r\n            .attr(\"class\", \"rect\")\r\n            .attr(\"x\", function(d) { return xScale(d); })\r\n            .attr(\"y\", function(d) { return yScale(d); })\r\n            .style(\"transform\", \"translateX(30px)\")\r\n            .attr(\"width\", xScale.bandwidth())\r\n            .attr(\"height\", function(d) { return height - yScale(d); })\r\n            .transition().duration(500)\r\n            .attr(\"fill\", function (d, i) {if(i+1 >= sliderRange[0] && i+1 <= sliderRange[1]) return \"#34568B\"; else return \"grey\"})\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <svg ref={ref}>\r\n                <g className=\"x-axis\" />\r\n                <g className=\"y-axis\" />\r\n            </svg>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chart","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Slider from '@material-ui/core/Slider';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: 300,\r\n    },\r\n});\r\n\r\nfunction valuetext(value) {\r\n    return `${value}`;\r\n}\r\n\r\nfunction RangeSlider(props) {\r\n    const classes = useStyles();\r\n    const min = 1, max = 8\r\n    const [value, setValue] = React.useState([min, max]);\r\n\r\n\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue);\r\n        props.onChange(newValue);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Typography id=\"range-slider\" gutterBottom>\r\n                Configuration Slider\r\n            </Typography>\r\n            <Slider\r\n                value={value}\r\n                max = {max}\r\n                min = {min}\r\n                onChange={handleChange}\r\n                valueLabelDisplay=\"auto\"\r\n                aria-labelledby=\"range-slider\"\r\n                getAriaValueText={valuetext}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RangeSlider","import React, {useEffect} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {updateSlider, addNewTabContent} from \"../redux\";\r\nimport Chart from \"./chart\";\r\nimport RangeSlider from \"./slider\";\r\n\r\n\r\nfunction TabContent (props) {\r\n\r\n    useEffect(()=>{\r\n        props.addNewTabContent();\r\n    }, [props.tabsNumber])\r\n\r\n\r\n    return (\r\n        <div>\r\n            {/*<h2>{`Tab_${props.id}`}</h2>\r\n            <h3>Counter - {props.counters.counters[props.id].contentCounter}</h3>\r\n            <button onClick={() => {props.increment(props.id);}}>increment</button>\r\n            <br/>*/}\r\n            {props.display == true &&\r\n            <table>\r\n                <tbody>\r\n                <tr>\r\n                    <Chart sliderRange={props.contents.contents[props.id].sliderRange}/>\r\n                </tr>\r\n                <tr>\r\n                    <td>\r\n                        <RangeSlider onChange={value => {props.updateSlider(props.id, value)}}/>\r\n                    </td>\r\n                </tr>\r\n                </tbody>\r\n            </table>\r\n            }\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        contents: state\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        updateSlider: (index, value) => dispatch(updateSlider(index, value)),\r\n        addNewTabContent: () => dispatch(addNewTabContent())\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TabContent)","import {UPDATE_SLIDER, ADD_NEW_TAB_CONTENT } from \"./contentTypes\";\r\n\r\nexport const updateSlider = (index = 0, value) => {\r\n    return {\r\n        type: UPDATE_SLIDER,\r\n        payload: {index: index, values: value}\r\n    }\r\n}\r\n\r\nexport const addNewTabContent = () => {\r\n    return {\r\n        type : ADD_NEW_TAB_CONTENT\r\n    }\r\n}\r\n","import React, {useState, useEffect} from 'react';\r\nimport TabContent from \"./tabContent\";\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\nimport Close from \"@material-ui/icons/Clear\";\r\nimport Add from \"@material-ui/icons/Add\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\n\r\nfunction TabPanel(props) {\r\n    const { children, value, index, ...other } = props;\r\n\r\n    return (\r\n        <Typography\r\n            component=\"div\"\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`scrollable-auto-tabpanel-${index}`}\r\n            aria-labelledby={`scrollable-auto-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {<Box p={3}>{children}</Box>}\r\n        </Typography>\r\n    );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n    children: PropTypes.node,\r\n    index: PropTypes.any.isRequired,\r\n    value: PropTypes.any.isRequired,\r\n};\r\n\r\nfunction a11yProps(index) {\r\n    return {\r\n        id: `scrollable-auto-tab-${index}`,\r\n        'aria-controls': `scrollable-auto-tabpanel-${index}`,\r\n    };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        width: '100%',\r\n        backgroundColor: theme.palette.background.paper,\r\n    },\r\n}));\r\n\r\nconst initialTabs = [\r\n        {id: 0, displayedContent: false},\r\n    ]\r\n\r\nfunction ScrollableTabsButtonAuto() {\r\n    const classes = useStyles();\r\n    const [selectedTab, setSelectedTab] = useState(0);\r\n    const [tabs, setTab] = useState(initialTabs);\r\n\r\n\r\n    const [target, setTarget] = useState(null);\r\n\r\n    const handleChange = (event, newValue) => {\r\n\r\n        if(event.target.tagName == 'SPAN'){\r\n            setSelectedTab(newValue);\r\n            setTarget(event.target)\r\n        }\r\n\r\n        else if (event.target.tagName !== 'SPAN' && event.target != target){\r\n            setSelectedTab(tabs[0].id);\r\n            setTarget(event.target)\r\n        }\r\n        else{\r\n            setSelectedTab(newValue);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <AppBar position=\"static\" color=\"default\">\r\n                <Tabs\r\n                    value={selectedTab}\r\n                    onChange={handleChange}\r\n                    indicatorColor=\"primary\"\r\n                    textColor=\"primary\"\r\n                    variant=\"scrollable\"\r\n                    scrollButtons=\"auto\"\r\n                    aria-label=\"scrollable auto tabs example\"\r\n\r\n                >\r\n                    {tabs.map((tab, index) =>\r\n                    {\r\n                        return (\r\n                                <Tab key={tab.id} className={'tab_id'} value={tab.id} label={<span>{`TAB${tab.id}`}\r\n                                    <IconButton onClick={() => {\r\n\r\n                                        if(tabs.length !== 1){\r\n                                            // To keep track of the tabs indexes, hide the closed tab\r\n                                            document.getElementsByClassName(`tab_id`)[tab.id].style.display = \"none\";\r\n                                            let item = tabs[index];\r\n                                            item.displayedContent = \"removed\";\r\n                                            tabs[index] = item;\r\n                                            setTab(tabs);\r\n                                        }\r\n\r\n                                    }}>\r\n                                      <Close fontSize=\"small\"/>\r\n                                    </IconButton>\r\n                                </span>}\r\n                                     {...a11yProps(index)}>\r\n\r\n                                </Tab>\r\n                        )\r\n                    })}\r\n                    <IconButton\r\n                        onClick={() => {\r\n                            // Append a new tab object on add button\r\n                            setTab([...tabs, {id: tabs.length, displayedContent: false}]);\r\n                        }}\r\n                    >\r\n                        <Add/>\r\n                    </IconButton>\r\n                </Tabs>\r\n\r\n            </AppBar>\r\n            {tabs.map((tab, index) =>\r\n            {\r\n                return (\r\n                    <TabPanel value={selectedTab} index={index}>\r\n                        <div className={`chart${index}`}>\r\n                           <TabContent id={index} tabsNumber={tabs.length} display={tab.displayedContent}/>\r\n                        </div>\r\n                        {\r\n                            // show tab's content only for those, the show button was clicked\r\n                            !tab.displayedContent &&\r\n                            <div>\r\n                                No charts available, please click on{<IconButton\r\n                                onClick={() => {\r\n                                    let item = tabs[index];\r\n                                    item.displayedContent = true;\r\n                                    tabs[index] = item;\r\n                                    setTab(tabs);\r\n                                    setTarget(index);\r\n                                }}\r\n                            >\r\n                                <Add/>\r\n                            </IconButton>}to add a new chart\r\n                            </div>\r\n                        }\r\n                    </TabPanel>\r\n                )\r\n            })}\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default ScrollableTabsButtonAuto;","import {UPDATE_SLIDER, ADD_NEW_TAB_CONTENT} from \"./contentTypes\";\r\n\r\nconst initialState = {\r\n    contents: [\r\n        { id: 0, sliderRange: [1, 8] },\r\n    ]\r\n}\r\n\r\nconst contentReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n\r\n        case UPDATE_SLIDER:\r\n            let item2 = state.contents[action.payload.index]; //pass index\r\n            item2.sliderRange = action.payload.values;\r\n            state.contents[action.payload.index] = item2;\r\n            return {\r\n                contents: state.contents\r\n            }\r\n\r\n        case ADD_NEW_TAB_CONTENT:\r\n            state.contents.push({ id: state.length + 1, contentCounter: 0, sliderRange: [1, 8] })\r\n            return {\r\n                contents: state.contents\r\n            }\r\n\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport default contentReducer","import { createStore } from 'redux'\r\nimport contentReducer from \"./content/contentReducer\";\r\n\r\nconst store = createStore(contentReducer)\r\n\r\nexport default store","import './App.css';\nimport ScrollableTabsButtonAuto from \"./components/tabs\";\nimport { Provider } from 'react-redux'\nimport store from \"./redux/store\";\n\nfunction App() {\n  return (\n    <Provider store={store}>\n        <div className=\"App\">\n          <ScrollableTabsButtonAuto />\n        </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}